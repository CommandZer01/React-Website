
/**
 * Flex Grid -
 * Version: 0.3.4
 *
 * Simple grid built with flex box and sass.
 *
 * Matthew Simo - matthew.a.simo@gmail.com
 */

/**
 * Grid setup
 *
 * The grid will calculate dimensions based on these two variables:
 * $fg-columns will inform the grid loops how many columns there should be.
 * $fg-gutter will inform the grid loops how big eac column's gutters should be.
 *
 * The grid will name columns, rows, offsets based on these three variables:
 * $fg-class-row string used for the row class
 * $fg-class-col string used for the column class
 * $fg-class-off string used for the offset class
 */
$fg-columns: 12 !default;
$fg-gutter: 0.5rem !default;

$fg-class-row: 'row' !default;
$fg-class-col: 'col' !default;
$fg-class-off: 'off' !default;



/**
 * Break point namespace object
 *
 * Set the default namespace object with these defaults with the
 * understanding that you can pass in whatever you might require for your site.
 *
 * $fg-breakpoints is a Sass list with nested lists inside. Each sub list defines two things.
 * 1. The namespace for that breakpoint. (Required) (i.e. xs, sm, md, lg)
 * 2. The min-width measurement for the breakpoint for that namespace. (i.e. 48em, 62em, 75em)
 *
 * Note: These should be in the proper order (at least till libsass handles map keys properly).
 *
 * Note: If the measurement is left out then it will be skipped when generating
 * the grid and applied to global styles.
 *
 */
$fg-breakpoints: (
  (xs),
  (sm, 768px),
  (md, 992px),
  (lg, 1200px)
) !default;

/**
 * Class Name Defaults
 *
 * Define class names for columns, rows and offsets in case compatibility with other
 * libraries is necessary.


/**
 * Calculate column size percentage
 */
@function get-col-percent($column-num) {

  @return $column-num / $fg-columns * 100%;

}

/**
 * Spacing mixin to create uniform margin/padding
 */
@mixin spacing( $value, $type: margin, $orientation: vertical ) {
  @if $orientation == vertical {
    #{ $type }-top: $value;
    #{ $type }-bottom: $value;
  } @else {
    #{ $type }-left: $value;
    #{ $type }-right: $value;
  }
}

/**
 * Row wrapper class, flex box parent.
 */
.#{ $fg-class-row } {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  @include spacing( ( -$fg-gutter ), margin, horizontal );
}


%#{ $fg-class-col } {
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-grow: 0;
  flex-shrink: 0;
  min-height: 1px;
  @include spacing( ( $fg-gutter ), padding, horizontal );
}

%#{ $fg-class-col }-flex {
  @extend %#{ $fg-class-col };
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}


/**
 * Generate a set of grid column classes using a namespace
 *
 * .#{ $fg-class-col }-[namespace] for intelligent column division
 * .#{ $fg-class-col }-[namespace]-[number] for a column that covers a specific number of columns (e.g. 1-12 by default)
 * .#{ $fg-class-off }-[namespace]-[number] for pushing a col a specific number of columns (e.g. 1-11 by default)
 */

@mixin grid-base( $namespace ) {
  .#{ $fg-class-col }-#{$namespace} {
    @extend %#{ $fg-class-col }-flex;
  }

  @for $i from 1 through $fg-columns {
    .#{ $fg-class-col }-#{$namespace}-#{$i} {
      @extend %#{ $fg-class-col };
    }
  }
}

@mixin grid-sizes( $namespace ) {

  // Run the loop for as many columns as speficied
  @for $i from 1 through $fg-columns {
    .#{ $fg-class-col }-#{$namespace}-#{$i} {
      flex-basis: get-col-percent($i);
      max-width:  get-col-percent($i);
    }
  }

  @for $i from 1 through $fg-columns {

    // Don't include the .off class for the last column
    @if ( $i != $fg-columns ) {
      .#{ $fg-class-off }-#{$namespace}-#{$i} {
        margin-left: get-col-percent($i);
      }
    }

  }

}


/**
 * Build the grid in two steps, to help minimize file size
 * Step 1, for each namespace, create the grid-base
 * Step 2, for each namespace, wrap the col width/offset measurements in their breakpoint media query
 */
@each $val in $fg-breakpoints {

  $namespace: nth($val, 1);
  @include grid-base( $namespace );

}

@each $val in $fg-breakpoints {
  @if length($val) == 1 {

    $namespace: nth($val, 1);
    @include grid-sizes( $namespace );

  } @else {

    $namespace: nth($val, 1);
    $size: nth($val, 2);

    @media only screen and (min-width: #{$size}) {
      @include grid-sizes( $namespace );
    }
  }
}







/******************************************************************
Site Name: Tidalpool
Author: OCS

Stylesheet: Grid Stylesheet

The gird is basically the sizing of all the elements and where they go within
the tidalpool framework

******************************************************************/




//large tablets 
  $col-lg-1:    4.16%; 
  $col-lg-2:    8.33%;
  $col-lg-3:    12.5%; 
  $col-lg-4:    16.65%; 
  $col-lg-5:    20.83%;
  $col-lg-6:    25%; 
  $col-lg-7:    29.16%;
  $col-lg-8:    33.33%; 
  $col-lg-9:    37.5%; 
  $col-lg-10:   41.66%; 
  $col-lg-11:   45.83%; 
  $col-lg-12:   50%; 
  $col-lg-13:   54.16%;
  $col-lg-14 : 58.33%; 
  $col-lg-15 : 62.5%; 
  $col-lg-16 : 66.59%; 
  $col-lg-17 : 70.83%; 
  $col-lg-18 : 75%; 
  $col-lg-19 : 79.16%; 
  $col-lg-20 : 83.33%; 
  $col-lg-21 : 87.5%; 
  $col-lg-22 : 91.66%; 
  $col-lg-23 : 95.83%; 
  $col-lg-24 : 100%; 


//small tablet columns
  $col-sm-1: 4.16%; 
  $col-sm-2: 8.33%; 
  $col-sm-3: 12.5%; 
  $col-sm-4: 16.66%; 
  $col-sm-5: 20.83%; 
  $col-sm-6: 25%; 
  $col-sm-7: 29.16%; 
  $col-sm-8: 33.33%; 
  $col-sm-9: 37.5%; 
  $col-sm-10: 41.66%; 
  $col-sm-11: 45.83%; 
  $col-sm-12: 50%; 
  $col-sm-13: 54.16%; 
  $col-sm-14: 58.33%; 
  $col-sm-15: 62.5%; 
  $col-sm-16: 66.66%; 
  $col-sm-17: 70.83%; 
  $col-sm-18: 75%; 
  $col-sm-19: 79.16%; 
  $col-sm-20: 83.33%; 
  $col-sm-21: 87.5%; 
  $col-sm-22: 91.66%; 
  $col-sm-23: 95.83%; 
  $col-sm-24: 100%; 
  
    //top padding  
  $top-0:0;
  $top-1: 2%;
  $top-2: 4%;
  $top-3: 6%;
  $top-4: 8%;
  $top-5: 10%;
  $top-6: 12%;
  $top-7: 14%;
  $top-8: 16%;
  $top-9: 18%;
  $top-10: 20%;
  $top-11: 22%;
  $top-12: 24%;
  $top-13: 26%;
  $top-14: 28%;
  $top-15: 30%;
  $top-16: 32%;
  $top-17: 34%;
  $top-18: 36%;
  $top-19: 38%;
  $top-20: 40%;


//left padding
$left-0:0;
$left-1: 2%;
$left-2: 4%;
$left-3: 6%;
$left-4: 8%;
$left-5: 10%;
$left-6: 12%;
$left-7: 14%;
$left-8: 16%;
$left-9: 18%;
$left-10: 20%;
$left-11: 22%;
$left-12: 24%;
$left-13: 26%;
$left-14: 28%;
$left-15: 30%;
$left-16: 32%;
$left-17: 34%;
$left-18: 36%;
$left-19: 38%;
$left-20: 40%;



//bottom padding
$bottom-0:0;
$bottom-1: 2%;
$bottom-2: 4%;
$bottom-3: 6%;
$bottom-4: 8%;
$bottom-5: 10%;
$bottom-6: 12%;
$bottom-7: 14%;
$bottom-8: 16%;
$bottom-9: 18%;
$bottom-10: 20%;
$bottom-11: 22%;
$bottom-12: 24%;
$bottom-13: 26%;
$bottom-14: 28%;
$bottom-15: 30%;
$bottom-16: 32%;
$bottom-17: 34%;
$bottom-18: 36%;
$bottom-19: 38%;
$bottom-20: 40%;


//right padding
$right-0:0;
$right-1: 2%;
$right-2: 4%;
$right-3: 6%;
$right-4: 8%;
$right-5: 10%;
$right-6: 12%;
$right-7: 14%;
$right-8: 16%;
$right-9: 18%;
$right-10: 20%;
$right-11: 22%;
$right-12: 24%;
$right-13: 26%;
$right-14: 28%;
$right-15: 30%;
$right-16: 32%;
$right-17: 34%;
$right-18: 36%;
$right-19: 38%;
$right-20: 40%;